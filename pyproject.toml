[tool.poetry]
name = "sam-python312-template"
version = "0.1.0"
description = "AWS SAM Python3.12 template repository"
authors = ["Takahashi Katsuyuki <kattakaha@gmail.com>"]
readme = "README.md"
package-mode = false


[tool.poetry.dependencies]
python = "^3.12"
aws-lambda-powertools = "^3.4.1"
pydantic = "^2.10.5"
fastjsonschema = "^2.21.1"
aws-xray-sdk = "^2.13.0"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.poetry.group.dev.dependencies]
black = "^25.1.0"
ruff = "^0.14.0"
isort = "^7.0.0"
taskipy = "^1.14.1"
mypy = "^1.14.1"
boto3 = "^1.36.0"
boto3-stubs = { version = "1.40.61", extras = [
    "apigateway",
    "apigatewaymanagementapi",
    "apigatewayv2",
    "cloudfront",
    "cognito-idp",
    "s3",
    "ses",
    "sesv2",
] }
toml = "^0.10.2"
poetry-plugin-export = "^1.9.0"
poetry-plugin-shell = "^1.0.1"


[tool.poetry.group.test.dependencies]
pytest = "^8.3.4"
pytest-mock = "^3.14.0"
pytest-cov = "^7.0.0"
pytest-env = "^1.1.5"
pytest-xdist = "^3.7.0"


[tool.taskipy.tasks]
export = "poetry export -f requirements.txt --output src/requirements.txt --without-hashes"
build = "task export && sam build"
dev = "task build && sam local start-api"
test = "pytest -s -vv --cov=. --cov-branch --cov-report=html"
ci-format = "task ci-format-black && task ci-format-isort"
format = "task format-black && task format-isort"
ci-format-black = "black --check src tests"
format-black = "black ./src ./tests"
ci-format-isort = "isort --check-only ./src ./tests"
format-isort = "isort ./src ./tests"
lint = "task lint-ruff && task lint-mypy"
lint-ruff = "ruff check src tests"
lint-mypy = "mypy src tests"
deploy = "task build && sam deploy --config-file samconfig.toml --config-env dev"
deploy-dev = "task build && sam deploy --config-file samconfig.toml --config-env dev"


[tool.pytest.ini_options]
pythonpath = "src"
testpaths = ["tests"]


[tool.black]
line-length = 120


[tool.isort]
# see: https://pycqa.github.io/isort/docs/configuration/multi_line_output_modes.html
profile = "black"
line_length = 120
import_heading_stdlib = "Standard Library"
import_heading_thirdparty = "Third Party Library"
import_heading_firstparty = "First Party Library"
import_heading_localfolder = "Local Library"
multi_line_output = 3
include_trailing_comma = true


[tool.mypy]
# The mypy configurations: https://mypy.readthedocs.io/en/stable/config_file.html
# Prefixes each error with the relevant context.
show_error_context = true
# Shows column numbers in error messages.
show_column_numbers = true
# Suppresses error messages about imports that cannot be resolved.
ignore_missing_imports = true
# Disallows defining functions without type annotations or with incomplete type annotations (a superset of disallow_incomplete_defs)
disallow_untyped_defs = true
# Shows a warning when returning a value with type Any from a function declared with a non- Any return type.
warn_return_any = true
# Shows a warning when encountering any code inferred to be unreachable or redundant after performing type analysis.
warn_unreachable = true
# Warns about unneeded # type: ignore comments.
warn_unused_ignores = true
# Warns about casting an expression to its inferred type.
warn_redundant_casts = true


[tool.ruff]
exclude = [
    ".venv",
    "__pycache__",
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    "build",
    "dist",
    "node_modules",
]
line-length = 120
indent-width = 4
